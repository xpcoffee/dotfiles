This contains my user-specific configuration for Emacs.
To use it in an emacs file, put the following in ~\~/emacs.d/init.el~

#+BEGIN_SRC
(require 'org)
(org-babel-load-file "/path/to/this/file/emacs.org")
#+END_SRC

* Navigation
** Vim bindings (evil mode)
   #+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
(evilem-default-keybindings "SPC") ;; easymotion
   #+END_SRC

** Command info
   ~which-key~ brings up a little context menu when typing emacs commands. This menu shows you the possible next options. Very useful.
   #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "path/to/which-key.el")
(require 'which-key)
(which-key-mode)
   #+END_SRC

** Recent files
   #+BEGIN_SRC emacs-lisp
(require 'recentf)
(add-to-list 'recentf-exclude "emacs.d/**/*") ;; don't show emacs.d files
(add-to-list 'recentf-exclude "build/**/*") ;; don't show build files
(add-to-list 'recentf-exclude "active-notes/**/*") ;; don't show notes files
   #+END_SRC

** Projectile (w/ helm)
   ~projectile~ is functionality that remembers code repositories (e.g. Git repos) and allows quick switching between them.
   ~helm~ is a nicer UI for a lot of things - projectile included
   #+BEGIN_SRC emacs-lisp
(require 'projectile)
(add-to-list 'projectile-globally-ignored-directories "build") ;; ignore build dirs
(require 'helm-projectile)
(setq projectile-mode-line "Projectile") ;; stop projectile from slowing startup
(helm-projectile-on)
   #+END_SRC

** Buffers
   #+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-x C-b") 'helm-buffers-list)
(global-set-key (kbd "<s-left>") 'previous-buffer)
(global-set-key (kbd "<s-right>") 'next-buffer)
   #+END_SRC
Kill other buffers
#+BEGIN_SRC emacs-lisp
(defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC
Kill dired buffers
#+BEGIN_SRC emacs-lisp
(defun kill-dired-buffers ()
        (interactive)
        (mapc (lambda (buffer)
        (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
            (kill-buffer buffer)))
        (buffer-list)))
#+END_SRC
** Magit
   Magit is git integration for emacs.
   #+BEGIN_SRC emacs-lisp
(require 'evil-magit)
   #+END_SRC
** Evil Matchit
Matchit allows you to jump around syntax boundaries (such as ~do~-~end~ in Ruby).
#+BEGIN_SRC emacs-lisp
(require 'evil-matchit)
(global-evil-matchit-mode 1)
#+END_SRC
* Coding/Typing
** Spaces
   MoneyMaker
   https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/
   #+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
   #+END_SRC

** Autocompletion
   ~company~ is an autocompletion framework
   #+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC

** Ruby
   #+BEGIN_SRC emacs-lisp
;; Use stuff in rbenv
(require 'rbenv)
(global-rbenv-mode)
;; Extra ruby funcitonality
(add-hook 'ruby-mode-hook 'robe-mode)
;; RuboCop
(add-hook 'ruby-mode-hook 'rubocop-mode)
   #+END_SRC

* Look/feel
** UI
   #+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(toggle-frame-maximized)
   #+END_SRC

** Dashboard
   #+BEGIN_SRC emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
(setq dashboard-items '((recents  . 5)
			(projects . 5)))
   #+END_SRC

** Theme
   #+BEGIN_SRC emacs-lisp
(load-theme 'leuven)
   #+END_SRC

* Extra features
** Orgmode
   ~org~ is a very powerful note-taking/keeping system. These notes are written in org.
   #+BEGIN_SRC emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
   #+END_SRC
